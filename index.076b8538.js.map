{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,SAAS,gBAAgB,CAAC,mBAAoB,WAC5C,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAU,EAAM,gBAAgB,CAAC,MACjC,EAAY,EAAM,aAAa,CAAC,SAChC,EAAO,MAAM,IAAI,CAAC,EAAU,gBAAgB,CAAC,OAEnD,EAAQ,OAAO,CAAC,SAAC,CAAA,CAAQ,CAAzB,EACE,EAAO,gBAAgB,CAAC,QAAS,WAC/B,IAAM,EAAkB,AAAU,IAAV,GAAe,AAAU,IAAV,EACjC,EAAa,EAAK,IAAI,CAAC,SAAC,CAAA,CAAM,CAApC,EACE,IAAM,EAAQ,EAAK,gBAAgB,CAAC,KAAK,CAAC,EAAM,CAAC,SAAS,CACpD,EAAQ,EAAK,gBAAgB,CAAC,KAAK,CAAC,EAAM,CAAC,SAAS,QAE1D,AAAI,EAEA,WAAW,EAAM,OAAO,CAAC,aAAc,KACvC,WAAW,EAAM,OAAO,CAAC,aAAc,KAGlC,EAAM,aAAa,CAAC,EAE/B,EAEA,CAAA,EAAU,SAAS,CAAG,GAEtB,AAAA,EAAU,MAAM,CAAhB,KAAA,CAAA,E,A,S,C,E,G,M,O,C,G,O,E,E,EAAoB,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,IACtB,EACF,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var table = document.querySelector(\"table\");\n    var headers = table.querySelectorAll(\"th\");\n    var tableBody = table.querySelector(\"tbody\");\n    var rows = Array.from(tableBody.querySelectorAll(\"tr\"));\n    headers.forEach(function(header, index) {\n        header.addEventListener(\"click\", function() {\n            var _tableBody;\n            var isNumericColumn = index === 2 || index === 3;\n            var sortedRows = rows.sort(function(rowA, rowB) {\n                var cellA = rowA.querySelectorAll(\"td\")[index].innerHTML;\n                var cellB = rowB.querySelectorAll(\"td\")[index].innerHTML;\n                if (isNumericColumn) return parseFloat(cellA.replace(/[^0-9.-]+/g, \"\")) - parseFloat(cellB.replace(/[^0-9.-]+/g, \"\"));\n                else return cellA.localeCompare(cellB);\n            });\n            tableBody.innerHTML = \"\";\n            (_tableBody = tableBody).append.apply(_tableBody, _to_consumable_array(sortedRows));\n        });\n    });\n});\n\n//# sourceMappingURL=index.076b8538.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const table = document.querySelector('table');\n  const headers = table.querySelectorAll('th');\n  const tableBody = table.querySelector('tbody');\n  const rows = Array.from(tableBody.querySelectorAll('tr'));\n\n  headers.forEach((header, index) => {\n    header.addEventListener('click', () => {\n      const isNumericColumn = index === 2 || index === 3;\n      const sortedRows = rows.sort((rowA, rowB) => {\n        const cellA = rowA.querySelectorAll('td')[index].innerHTML;\n        const cellB = rowB.querySelectorAll('td')[index].innerHTML;\n\n        if (isNumericColumn) {\n          return (\n            parseFloat(cellA.replace(/[^0-9.-]+/g, '')) -\n            parseFloat(cellB.replace(/[^0-9.-]+/g, ''))\n          );\n        } else {\n          return cellA.localeCompare(cellB);\n        }\n      });\n\n      tableBody.innerHTML = '';\n\n      tableBody.append(...sortedRows);\n    });\n  });\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","document","addEventListener","table","querySelector","headers","querySelectorAll","tableBody","rows","from","forEach","header","index","isNumericColumn","sortedRows","sort","rowA","rowB","cellA","innerHTML","cellB","parseFloat","replace","localeCompare","append","apply","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError"],"version":3,"file":"index.076b8538.js.map"}